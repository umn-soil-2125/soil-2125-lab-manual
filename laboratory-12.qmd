# **Soil Management: Physical**

::: callout-note
## Objectives

-   Learn how to use the Universal Soil Loss Equation, USLE.
-   Determine the effect of crop management and cropping practices on soil loss.
:::

::: callout-tip
## Key Words & Concepts

-   USLE
-   T
-   Conservation tillage
-   Conventional tillage
-   Crop management
-   Cropping practice
:::

## INVESTIGATION A: Soil Water Erosion: Raindrop Impact

Soil erosion occurs naturally on all land. Soil erosion may proceed relatively unnoticed or it may occur at an alarming rate --- causing serious loss of topsoil. The loss of soil from farmlands is usually reflected in reduced crop production potential, lower surface water quality and damaged drainage networks.

**Raindrop Impact**

Spread a thin layer of each soil on separate pieces of paper. Hold the water dropper one foot above the surface of the soil-covered paper. Allow a single drop of water to fall from the dropper onto the soil. Observe the effects on the silty and sandy soils.

1.  What effect does the impact of the water have on each soil (explain any differences that you observe)?

<br>
<br>

2.  How would the presence of plant cover change this?

<br>
<br>

## INVESTIGATION B: Soil Water Erosion: Residue Cover and Runoff

**Water Runoff**

Pour just enough water (about ½ of the small beaker) into each funnel at the top of each column so that a small amount of water runs off the soil surface and collects in a larger beaker. Compare the difference in erosion between the uncovered and covered soil. Complete the following table.

```{r, echo = FALSE, message = FALSE, warning = FALSE}
library(huxtable)
library(dplyr)

################
## BUILD TABLE
################
Soil <- c("Uncovered", "Covered")
Rate <- c("", "")
Explanation <- c("", "")

soilrate <- data.frame(Soil, Rate, Explanation)
colnames(soilrate) = c("Soil", "Rate (High/Low)", "Explanation")

col.num = 3
row.num = 3 #including header

################
## SET AS HUXTABLE TYPE
################
soilrate_ht <- as_hux(soilrate)

################
## SET FORMATTING
################
#NOTE: only thing you really need to mess with down here is the padding. If you need extra row height, keep them - if not, just put a hastag in front of them

tab1.1 = soilrate_ht %>% 
      set_all_padding(4) %>% 
      set_outer_padding(0) %>% 
      set_number_format(0) %>% #this tells it how many decimals to print after any numbers
      set_bold(row = 1, col = everywhere) %>% #make header row bold
      #set_bottom_border(row = 1, col = everywhere) %>% # probably dont need this because you set all borders below
      set_width(0.9) %>% #; 1 == full width
      set_align(row = 1:row.num, col = 1:col.num, value = 'center') %>%
      set_valign(row = 1:row.num, col = 1:col.num, value = 'middle') %>%
      #set_number_format(2:3, 1, value = NA) %>% #; don't format these cells as numbers
      #set_col_width(c(0.3, 0.6)) %>%
      set_latex_float(value = "h!") %>%
      #set_row_height(1:3, c(0.02, 0.2, 0.2)) %>%
      set_bottom_padding(row = 2:3, col= 1:col.num, 30) %>%
      set_top_padding(row = 2:3, col = 1:col.num, 30) %>%
      #set_row_height(c(0.02, 0.2, 0.2)) %>%
      set_all_borders(brdr(1, "solid", "black"))
      #set_caption("Pots of jam for sale") # this is if we want a caption - I don't think we need any captions but leaving it here just in case

tab1.1
```

## INVESTIGATION C: Predicting Erosion with the Universal Soil Loss Equation

Determine the erosion rates for the Seaton and Frontenac soils (located on the plaster landscape model). Use the white-painted lines and indicated lengths for the LS factor for the three erosion estimates. These soils are located in Winona County, MN.

$$
USLE:\ A\ =\ R\ *\ K\ *\ LS\ *\ C\ *\ P
$$

A = Soil loss in tons per acre

R = Rainfall factor

C = Crop management factor

K = Soil erodibility factor (use surface values)

LS = Slope length and slope steepness factor

P = Erosion control practice factor

T = Tolerable loss

Complete the table below following steps 1 -- 5.

```{r, echo = FALSE, message = FALSE, warning = FALSE}
library(huxtable)
library(dplyr)

################
## BUILD TABLE
################
Site <- c("Site 1: Corn-oats-pasture rotation; no conservation practices", "Site 2: Corn-soybean rotation; no conservation practices", "Site 3: Woodland; no conservation practices")
R <- c("", "", "")
K <- c("", "", "")
LS <- c("", "", "")
C <- c("", "", "")
P <- c("", "", "")
A <- c("", "", "")
Total <- c("", "", "")

usle <- data.frame(Site, R, K, LS, C, P, A, Total)
colnames(usle) = c("", "R", "K", "LS", "C", "P", "A", "T")

col.num = 8
row.num = 4 #including header

################
## SET AS HUXTABLE TYPE
################
usle_ht <- as_hux(usle)

################
## SET FORMATTING
################
#NOTE: only thing you really need to mess with down here is the padding. If you need extra row height, keep them - if not, just put a hastag in front of them

tab1.1 = usle_ht %>% 
      set_all_padding(4) %>% 
      set_outer_padding(0) %>% 
      set_number_format(0) %>% #this tells it how many decimals to print after any numbers
      set_bold(row = 1, col = everywhere) %>% #make header row bold
      #set_bottom_border(row = 1, col = everywhere) %>% # probably dont need this because you set all borders below
      set_width(0.9) %>% #; 1 == full width
      set_align(row = 1:row.num, col = 1:col.num, value = 'center') %>%
      set_valign(row = 1:row.num, col = 1:col.num, value = 'middle') %>%
      #set_number_format(2:3, 1, value = NA) %>% #; don't format these cells as numbers
      set_col_width(c(0.3, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1)) %>%
      set_latex_float(value = "h!") %>%
      #set_row_height(1:3, c(0.02, 0.2, 0.2)) %>%
      #set_bottom_padding(row = 2:3, col= 1:2, 60) %>%
      #set_top_padding(row = 2:3, col = 1:2, 60) %>%
      #set_row_height(c(0.02, 0.2, 0.2)) %>%
      set_all_borders(brdr(1, "solid", "black"))
      #set_caption("Pots of jam for sale") # this is if we want a caption - I don't think we need any captions but leaving it here just in case

tab1.1
```

1.  R is found on the laminated map in the lab.

2.  K and T are found in the Winona County Soil Survey, Table 16, page 261.

3.  LS is found as follows:

     a. Measure the slope length on the plaster model by placing a ruler between the black lines on the laminated plastic marker at each location. Measure to the nearest 1/16 inch. Record your measurement in Table 2 below.

     b. Convert the measurement from Step 1 to feet. Multiply your measurement obtained in Step 1 using the horizontal scale factor (1:1,520), then divide by 12. Do this at each sampling location. Record your result in Table 2 below.

     c. Read the slope in degrees off the dial on the side of the clinometer (Figure 1) at each sampling location on the plaster model (the white lines). Some of the sampling sites on the model are not are not flat so the clinometer will tend to rock back and forth. Try to average the variation by finding a middle point. Record your reading in Table 2.

     d. Divide the measured slope obtained in Step 3c by 2 to correct for the vertical exaggeration of the model. For example, if you obtain a clinometer reading of 16° on the model, the corrected slope is 8° (16° ÷ 2 = 8°). Record your calculation in Table 2.

     e. Using the Extended LS Factor Table on the next page, find the slope in degrees in Column 1 corresponding to the corrected value obtained in Step 3d. Record the corresponding slope in percent from Column 2 in Table 2. You will need percent slope to determine P. f. Continue moving across the row to the column that corresponds to the slope length in feet found in Step 3b and read the LS factor from the body of the table. There is no need to interpolate. Record the LS factor in Tables 1 and 2.

4.  C and P are found in the corresponding tables in Investigation D (last page of book). Use the information given in the first column of Table 1.

5.  To obtain A, multiply R, K, LS, C, and P in Table 1.

6.  Check with the lab TA to be sure your calculations of soil loss (A) for Investigation A are acceptable before going on to Investigation D.

```{r, echo = FALSE, message = FALSE, warning = FALSE}
library(huxtable)
library(dplyr)

################
## BUILD TABLE
################
Site <- c("1", "2", "3")
LengthModel <- c("", "", "")
LengthEarth <- c("", "", "")
Slope <- c("", "", "")
Slopedivided <- c("", "", "")
Slopepercent <- c("", "", "")
LS <- c("", "", "")

sitelength <- data.frame(Site, LengthModel, LengthEarth, Slope, Slopedivided, Slopepercent, LS)
colnames(sitelength) = c("Site", "Length on Model (in; step 3a)", "Length on Earth (ft; step 3b)", "Slope (degrees; step 3c)", "Slope / 2 (degrees; step 3d", "Slope (%; step 3e)", "LS (step 3f)")

col.num = 7
row.num = 4 #including header

################
## SET AS HUXTABLE TYPE
################
sitelength_ht <- as_hux(sitelength)

################
## SET FORMATTING
################
#NOTE: only thing you really need to mess with down here is the padding. If you need extra row height, keep them - if not, just put a hastag in front of them

tab1.1 = sitelength_ht %>% 
      set_all_padding(4) %>% 
      set_outer_padding(0) %>% 
      set_number_format(0) %>% #this tells it how many decimals to print after any numbers
      set_bold(row = 1, col = everywhere) %>% #make header row bold
      #set_bottom_border(row = 1, col = everywhere) %>% # probably dont need this because you set all borders below
      set_width(0.9) %>% #; 1 == full width
      set_align(row = 1:row.num, col = 1:col.num, value = 'center') %>%
      set_valign(row = 1:row.num, col = 1:col.num, value = 'middle') %>%
      #set_number_format(2:3, 1, value = NA) %>% #; don't format these cells as numbers
      #set_col_width(c(0.3, 0.6)) %>%
      set_latex_float(value = "h!") %>%
      #set_row_height(1:3, c(0.02, 0.2, 0.2)) %>%
      #set_bottom_padding(row = 2:3, col= 1:2, 60) %>%
      #set_top_padding(row = 2:3, col = 1:2, 60) %>%
      #set_row_height(c(0.02, 0.2, 0.2)) %>%
      set_all_borders(brdr(1, "solid", "black"))
      #set_caption("Pots of jam for sale") # this is if we want a caption - I don't think we need any captions but leaving it here just in case

tab1.1
```

![Extended LS Factor Table. Use values from steps 3b and 3d.](extended-ls-factor-table.png){#fig-ls}

## INVESTIGATION D: Modifying Soil Loss

The tolerable soil loss for most soils in Minnesota is approximately 3 to 5 tons per acre per year. Which area(s) from Table 1 in Investigation C exceed T (circle two)?

**Site 1**                                              **Site 2**                                               **Site 3**

Modify C and P to reduce erosion below T for the areas you circled. Fill out the tables below.

Keep in mind that the landowner wants to maximize their income from the land while implementing conservation practices. Converting a field to woodland significantly reduces income and requires ten to twenty years' investment before realizing any return. Consequently, converting a field to woodland is the least desirable option and should be used only if no other combination to reduce A to below T can be found.

Fill out the table with your new management strategy.

```{r, echo = FALSE, message = FALSE, warning = FALSE}
library(huxtable)
library(dplyr)

################
## BUILD TABLE
################
Site <- c("1", "2", "3")
C <- c("", "", "")
P <- c("", "", "")

sitecp <- data.frame(Site, C, P)
colnames(sitecp) = c("Site", "C", "P")

col.num = 3
row.num = 4 #including header

################
## SET AS HUXTABLE TYPE
################
sitecp_ht <- as_hux(sitecp)

################
## SET FORMATTING
################
#NOTE: only thing you really need to mess with down here is the padding. If you need extra row height, keep them - if not, just put a hastag in front of them

tab1.1 = sitecp_ht %>% 
      set_all_padding(4) %>% 
      set_outer_padding(0) %>% 
      set_number_format(0) %>% #this tells it how many decimals to print after any numbers
      set_bold(row = 1, col = everywhere) %>% #make header row bold
      #set_bottom_border(row = 1, col = everywhere) %>% # probably dont need this because you set all borders below
      set_width(0.9) %>% #; 1 == full width
      set_align(row = 1:row.num, col = 1:col.num, value = 'center') %>%
      set_valign(row = 1:row.num, col = 1:col.num, value = 'middle') %>%
      #set_number_format(2:3, 1, value = NA) %>% #; don't format these cells as numbers
      set_col_width(c(0.2, 0.4, 0.4)) %>%
      set_latex_float(value = "h!") %>%
      #set_row_height(1:3, c(0.02, 0.2, 0.2)) %>%
      set_bottom_padding(row = 2:4, col= 1:3, 20) %>%
      set_top_padding(row = 2:4, col = 1:3, 20) %>%
      #set_row_height(c(0.02, 0.2, 0.2)) %>%
      set_all_borders(brdr(1, "solid", "black"))
      #set_caption("Pots of jam for sale") # this is if we want a caption - I don't think we need any captions but leaving it here just in case

tab1.1
```

Show new calculations in the table below.

```{r, echo = FALSE, message = FALSE, warning = FALSE}
library(huxtable)
library(dplyr)

################
## BUILD TABLE
################
Site <- c("1", "2", "3")
R <- c("", "", "")
K <- c("", "", "")
LS <- c("", "", "")
C <- c("", "", "")
P <- c("", "", "")
NewA <- c("", "", "")
NewTotal <- c("", "", "")

uslenew <- data.frame(Site, R, K, LS, C, P, A, Total)
colnames(uslenew) = c("", "R", "K", "LS", "C", "P", "New A", "T")

col.num = 8
row.num = 4 #including header

################
## SET AS HUXTABLE TYPE
################
uslenew_ht <- as_hux(uslenew)

################
## SET FORMATTING
################
#NOTE: only thing you really need to mess with down here is the padding. If you need extra row height, keep them - if not, just put a hastag in front of them

tab1.1 = uslenew_ht %>% 
      set_all_padding(4) %>% 
      set_outer_padding(0) %>% 
      set_number_format(0) %>% #this tells it how many decimals to print after any numbers
      set_bold(row = 1, col = everywhere) %>% #make header row bold
      #set_bottom_border(row = 1, col = everywhere) %>% # probably dont need this because you set all borders below
      set_width(0.9) %>% #; 1 == full width
      set_align(row = 1:row.num, col = 1:col.num, value = 'center') %>%
      set_valign(row = 1:row.num, col = 1:col.num, value = 'middle') %>%
      #set_number_format(2:3, 1, value = NA) %>% #; don't format these cells as numbers
      #set_col_width(c(0.3, 0.6)) %>%
      set_latex_float(value = "h!") %>%
      #set_row_height(1:3, c(0.02, 0.2, 0.2)) %>%
      #set_bottom_padding(row = 2:3, col= 1:2, 60) %>%
      #set_top_padding(row = 2:3, col = 1:2, 60) %>%
      #set_row_height(c(0.02, 0.2, 0.2)) %>%
      set_all_borders(brdr(1, "solid", "black"))
      #set_caption("Pots of jam for sale") # this is if we want a caption - I don't think we need any captions but leaving it here just in case

tab1.1
```

Crop management factor, **C**.

```{r, echo = FALSE, message = FALSE, warning = FALSE}
library(huxtable)
library(dplyr)

################
## BUILD TABLE
################
C <- c("1.0", "0.55", "0.40", "0.30", "0.20", "0.08", "0.04", "0.006", "0.005")
Management <- c("No crop; moldboard plow", "Continuous corn; moldboard plow", "Corn-soybean rotation", "Continuous corn; conservation tillage", "Corn-oats rotation", "Corn-oats-pasture rotation", "Continuous corn; no till", "Pasture", "Woodland")

cmanagement <- data.frame(C, Management)
colnames(cmanagement) = c("C", "Management")

col.num = 2
row.num = 10 #including header

################
## SET AS HUXTABLE TYPE
################
cmanagement_ht <- as_hux(cmanagement)

################
## SET FORMATTING
################
#NOTE: only thing you really need to mess with down here is the padding. If you need extra row height, keep them - if not, just put a hastag in front of them

tab1.1 = cmanagement_ht %>% 
      set_all_padding(4) %>% 
      set_outer_padding(0) %>% 
      set_number_format(2) %>% #this tells it how many decimals to print after any numbers
      set_bold(row = 1, col = everywhere) %>% #make header row bold
      #set_bottom_border(row = 1, col = everywhere) %>% # probably dont need this because you set all borders below
      set_width(0.9) %>% #; 1 == full width
      set_align(row = 1:row.num, col = 1:col.num, value = 'center') %>%
      set_valign(row = 1:row.num, col = 1:col.num, value = 'middle') %>%
      #set_number_format(2:3, 1, value = NA) %>% #; don't format these cells as numbers
      #set_col_width(c(0.3, 0.6)) %>%
      set_latex_float(value = "h!") %>%
      #set_row_height(1:3, c(0.02, 0.2, 0.2)) %>%
      #set_bottom_padding(row = 2:3, col= 1:2, 60) %>%
      #set_top_padding(row = 2:3, col = 1:2, 60) %>%
      #set_row_height(c(0.02, 0.2, 0.2)) %>%
      set_all_borders(brdr(1, "solid", "black"))
      #set_caption("Pots of jam for sale") # this is if we want a caption - I don't think we need any captions but leaving it here just in case

tab1.1
```

Erosion control practice factor, ratio of soil loss compared to farming up and down the slope, **P**.

```{r, echo = FALSE, message = FALSE, warning = FALSE}
library(huxtable)
library(dplyr)

################
## BUILD TABLE
################
Slope <- c("1.1-2.0", "2.1-7.0", "7.1-12.0", "12.1-18.0", "18.1-24.0")
NoPractice <- c("1.0", "1.0", "1.0", "1.0", "1.0")
Contouring <- c("0.60", "0.50", "0.60", "0.80", "0.90")
Alternatesmallgrains <- c("0.45", "0.40", "0.45", "0.60", "0.70")
Alternategrass <- c("0.30", "0.25", "0.30", "0.40", "0.45")

slopepractice <- data.frame(Slope, NoPractice, Contouring, Alternatesmallgrains, Alternategrass)
colnames(slopepractice) = c("Slope %", "No Practice", "Contouring Alone", "Contouring plus alternate strips with small grains", "Contouring plus alternate strips with grass")

col.num = 5
row.num = 6 #including header

################
## SET AS HUXTABLE TYPE
################
slopepractice_ht <- as_hux(slopepractice)

################
## SET FORMATTING
################
#NOTE: only thing you really need to mess with down here is the padding. If you need extra row height, keep them - if not, just put a hastag in front of them

tab1.1 = slopepractice_ht %>% 
      set_all_padding(4) %>% 
      set_outer_padding(0) %>% 
      set_number_format(1) %>% #this tells it how many decimals to print after any numbers
      set_bold(row = 1, col = everywhere) %>% #make header row bold
      #set_bottom_border(row = 1, col = everywhere) %>% # probably dont need this because you set all borders below
      set_width(0.9) %>% #; 1 == full width
      set_align(row = 1:row.num, col = 1:col.num, value = 'center') %>%
      set_valign(row = 1:row.num, col = 1:col.num, value = 'middle') %>%
      #set_number_format(2:3, 1, value = NA) %>% #; don't format these cells as numbers
      #set_col_width(c(0.3, 0.6)) %>%
      set_latex_float(value = "h!") %>%
      #set_row_height(1:3, c(0.02, 0.2, 0.2)) %>%
      #set_bottom_padding(row = 2:3, col= 1:2, 60) %>%
      #set_top_padding(row = 2:3, col = 1:2, 60) %>%
      #set_row_height(c(0.02, 0.2, 0.2)) %>%
      set_all_borders(brdr(1, "solid", "black"))
      #set_caption("Pots of jam for sale") # this is if we want a caption - I don't think we need any captions but leaving it here just in case

tab1.1
```
